#Criando uma imagem de docker pequena com golang
Nosso desafio será: 
  Criar uma imagem pequena, que não ultrapsse 2 MB e rode uma aplicação em golang.

##Começando
Pra começar vamos consultar o site da Go Lang e ver como se faz um Hello World:
  https://go.dev/doc/tutorial/getting-started


O primeiro passo será criar uma pasta vamos chamar de essa pasta com o nome de docker-golang:

```
mkdir docker-golang

cd docker-golang
```

Dentro dessa pasta vamos inicializar uma aplicação go:

```
go mod init main
```

Agora vamos criar um arquivo chamado main.go com o seguinte conteúdo:

```
package main

import "fmt"

func main() {
	fmt.Println("Full Cycle Rocks!!")
}
```

Podemos executar nossa aplicação:

```
go run .

Full Cycle Rocks!!
```

##Criando a imagem para o container
Agora queremos criar uma imagem docker para o nosso container, sendo assim vamos criar um Dockerfile

```
FROM golang:1.21
WORKDIR /usr/src/app
COPY . .
RUN go mod download && go mod verify
RUN go build -v -o /usr/local/bin/app ./...
CMD ["app"]
```

Vamos buildar a nossa imagem

```
docker build -t rodrigordavila/golang:latest .
```

Podemos conferir se a imagem foi criada

```
docker images                      
REPOSITORY               TAG       IMAGE ID       CREATED             SIZE
rodrigordavila/golang:latest       latest    bce6cf8d8c75   15 minutes ago   841MB
```

E executar a nossa imagem

```
docker run rodrigordavila/golang    
Full Cycle Rocks!!
```

##Porém nossa imagem está muito grande ainda 841 MB.

Multi Staging Build
O multi stage build nos permite construir nossa imagem com multiplos estágios, nossa imagem ficou grande pois tudo está incluso nela, então o que vamos fazer é separar o build da aplicação do seu container de execução.

Na imagem de execução que vai ser nossa imagem final, vai ter apenas o executável da aplicação e mais nada a imagem de build será descartada automaticamente após buildar.

Também vamos utilizar na imagem de build uma versão mais enxuta chamada alpine da linguagem go e na imagem de execução uma imagem base bem enxuta chamada scratch.

##Então pra começar vamos alterar o nosso Dockerfile

```
FROM golang:1.21-alpine AS builder
WORKDIR /usr/src/app
COPY . .
RUN go mod download && go mod verify
RUN go build -v -o /usr/local/bin/app ./...
FROM scratch
COPY --from=builder /usr/local/bin/app /usr/local/bin/app
CMD ["/usr/local/bin/app"]
```

##Após a alteração vamos buildar novamente

docker build -t rodrigordavila/golang:latest .

E podemos ver que o tamanho da imagem foi significativamente reduzido

```
docker images

REPOSITORY               TAG       IMAGE ID       CREATED              SIZE
rodrigordavila/golang   latest    7b31b20971ab   15 minutes ago   1.81MB
```

Agora podemos conferir a execução

```
docker run rodrigordavila/golang                    

Full Cycle Rocks!!
```

##Agora vamos colocar nossa imagem no registry do docker hub.

Subindo nossa imagem no dockerhub
Primeiramente se você não tem uma conta no docker hub criee uma.

E faça login na sua máquina utilizando seu usuário e senha do docker hub

```
docker login -u seu-usuario-docker-hub
Password:
```

Digite seu username do docker hub e sua senha.

Se tudo deu certo você deve ver a mensagem Login Succeeded

Agora apenas execute um push da imagem

```
docker push rodrigordavila/golang:latest
```

Feito isso provavelmente você já verá sua imagem publicada no docker hub.

ATENÇÃO: Quando você for buildar sua imagem e fazer o docker push substitua rodrigordavila pelo seu usuário do dockerhub.

##Distribuindo a imagem
Agora por fim vamos criar um docker-compose.yaml para que qualquer um possa utilizar a nossa imagem

```
services:
  app:
    image: rodrigordavila/golang
    container_name: golang
```

Agora qualquer um que tenha esse docker-compose.yaml pode baixar a imagem e executar o container.

Para baixar a imagem basta no diretório onde está o docker-comppose.yaml executar o comando:

```
docker-compose up -d

[+] Running 1/1
 ✔ Container golang  Started     
```
Podemos verificar as imagens

```
docker images                

REPOSITORY              TAG       IMAGE ID       CREATED          SIZE
rodrigordavila/golang   latest    7b31b20971ab   52 minutes ago   1.81MB
```

E para executar o container

```
docker run rodrigordavila/golang

Full Cycle Rocks!!
```
